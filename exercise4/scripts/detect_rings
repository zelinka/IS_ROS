#!/usr/bin/env python
from __future__ import print_function
 
import roslib
# roslib.load_manifest('exercise4')
import sys
import rospy
import cv2
import tf
import numpy as np
import tf2_geometry_msgs
import tf2_ros
from math import sqrt
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA

dictm = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_6X6_250)
homography_pub = rospy.Publisher("homography_image", Image, queue_size=100)

T_krogov = []
 
class P_krogi:
    def __init__(self):
        self.tocke = []
        self.centroid = None
        self.markirana = False
    def add(self, tocka):
        self.tocke.append(tocka)
        if(len(self.tocke) == 1):
            self.centroid = tocka
        else:
            c = P_tocka(0,0,0)
            for t in self.tocke:
                c.x += t.x
                c.y += t.y
                c.z += t.z
            l = len(self.tocke)
            c.x /= l
            c.y /= l
            c.z /= l
            self.centroid = c
 
 
 
class P_tocka:
    def __init__(self,x,y,z):
        self.x = x
        self.y = y
        self.z = z
 
def euclidian(tocka1, tocka2):
    return sqrt((tocka1.x - tocka2.x)**2 + (tocka1.y - tocka2.y)**2)
 
def centroid(t):
 
    center = P_tocka(0, 0, 0)
 
    for tocka in t:
        center.x += tocka.x
        center.y += tocka.y
        center.z += tocka.z
   
    l = len(t)
    center.x /= l
    center.y /= l
    center.z /= l
 
    return center
 
 
class The_Ring:
    def __init__(self):
        # anonymous je bil spremenjen na False, da lahko ubijemo "rosnode kill"
        rospy.init_node('image_converter', anonymous=False)
 
        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()
 
        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)
 
        # Marker array object used for visualizations
        self.marker_array = MarkerArray()
        self.marker_num = 1
 
        # Subscribe to the image and/or depth topic
        self.image_sub = rospy.Subscriber("/camera/rgb/image_color", Image, self.image_callback)
        #self.depth_sub = rospy.Subscriber("/camera/depth_registered/image_raw", Image, self.depth_callback)
 
        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher('markers', MarkerArray, queue_size=1000)

        self.markers_cilji_pub = rospy.Publisher('/markers_ring', Pose, queue_size=1000)
 
        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)
        self.counter = 0
        self.pot_tocke = []
        self.time_rec = rospy.Time(0)
 
    def get_robot_pose(self):
        print(rospy.Time.now(),"rospy.Time.now()")    
        print(self.time_rec,"self.time_rec")  
        while(True):
            try:
                trans = self.tf_buf.lookup_transform('map', 'base_link', self.time_rec)
            except:
                #print("error")
                continue
            break

        pose = Pose()
        pose.position.x = trans.transform.translation.x
        pose.position.y = trans.transform.translation.y
        pose.position.z = trans.transform.translation.z
        return pose

    def pose_length(self, pose):
        return sqrt(pose.position.x**2 + pose.position.y**2 + pose.position.z**2)

    def get_goal(self, pose_r, pose_c):
        pose_g = Pose()
        pose_g.position.x = pose_r.position.x - pose_c.position.x
        pose_g.position.y = pose_r.position.y - pose_c.position.y
        pose_g.position.z = pose_r.position.z - pose_c.position.z
        dist  = self.pose_length(pose_g)
        pose_g.position.x /= dist
        pose_g.position.y /= dist
        #pose_g.position.z /= dist
        pose_g.position.x *= 0.4
        pose_g.position.y *= 0.4
        #pose_g.position.z *= 0.6

        pose_final = Pose()
        pose_final.position.x = pose_c.position.x + pose_g.position.x
        pose_final.position.y = pose_c.position.y + pose_g.position.y
        #pose_final.position.z = pose_c.position.z + pose_g.position.z
        
        #izracun kota vektorja glede na x os (za rotacijo robota)
        pose_final.position.z = np.arctan(-pose_g.position.y / -pose_g.position.x)
        # rotacije robota, kaj je kot robota, v katero smer je obrnjen?
        #povsod nastavimo x in y

        if (-pose_g.position.x < 0):
            pose_final.position.z += np.pi
        elif(-pose_g.position.x == 0 and -pose_g.position.y < 0):
            pose_final.position.z += np.pi

        tempKot = pose_final.position.z * 180/np.pi
        print(tempKot)
        if (315 <= tempKot <= 360 or -45 <= tempKot <= 45 or -360 <= tempKot <= -315 or 135 <= tempKot <= 225 or -225 <= tempKot <= -135):
            pose_final.position.y = pose_c.position.y
            if (315 <= tempKot <= 360 or -45 <= tempKot <= 45 or -360 <= tempKot <= -315):
                pose_final.position.z = 0
            else:
                pose_final.position.z = np.pi

        else:
            pose_final.position.x = pose_c.position.x
            if (45 < tempKot < 135 or -315 < tempKot < -225):
                pose_final.position.z = np.pi*0.5
            else:
                pose_final.position.z = np.pi*1.5



        print("Kot vektorja = ", (pose_final.position.z*180/np.pi), " x=",-pose_g.position.x, " y=", -pose_g.position.y)

        return pose_final

    def double_check(self, krog, circle_confirmation, thresh):
        global T_krogov
        for k in T_krogov:
            if euclidian(k.centroid, krog.centroid) != 0: #ne primerjamo svojega centroida 
                if len(k.tocke) >= circle_confirmation:   #primerjamo samo centroide markerjev ki so post-ani
                    if euclidian(k.centroid, krog.centroid) < thresh: 
                        return False
        return True

    def get_pose(self,e,dist):
        # Calculate the position of the detected ellipse
 
        k_f = 525 # kinect focal length in pixels
 
        elipse_x = self.dims[1] / 2 - e[0][0]
        elipse_y = self.dims[0] / 2 - e[0][1]
        
        angle_to_target = np.arctan2(elipse_x,k_f)
 
        # Get the angles in the base_link relative coordinate system
        x,y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)
 
        # Define a stamped message for transformation
        point_s = PointStamped()
        point_s.point.x = x
        point_s.point.y = y
        point_s.point.z = 0.3
        point_s.header.frame_id = "base_link"
        point_s.header.stamp = rospy.Time(0)
 
        # Get the point in the "map" coordinate system
        while(True):
            try:
                point_world = self.tf_buf.transform(point_s,"map")
                #print("while")
            except:
                #print("error")
                continue
            break
        
        '''(point_world.x != None and point_world.y != None and point_world.z != None))or '''
        if(point_s.point.x != 0 and point_s.point.y != 0):
        #point_s.header.frame_id = "base_link"
        #point_s.header.stamp = 
            '''
            pose = Pose()
            pose.position.x = point_world.point.x
            pose.position.y = point_world.point.y
            pose.position.z = point_world.point.z
            # Create a marker used for visualization of circle detection
            self.marker_num += 1
            marker = Marker()
            marker.header.stamp = point_world.header.stamp
            marker.header.frame_id = point_world.header.frame_id
            marker.pose = pose
            marker.type = Marker.CUBE
            marker.action = Marker.ADD
            marker.frame_locked = False
            marker.lifetime = rospy.Duration.from_sec(120)
            marker.id = self.marker_num
            marker.scale = Vector3(0.1, 0.1, 0.1)
            marker.color = ColorRGBA(0, 1, 0, 1)
            self.marker_array.markers.append(marker)
            self.markers_pub.publish(self.marker_array)
            print("dodana zaznava")
           bridge '''
            

            tocka = P_tocka(point_world.point.x, point_world.point.y, point_world.point.z)

            #print(point_world.point.x)
    
            global T_krogov
            #print("marker array length", self.marker_num)
            #print("stevilo skupin zaznav", len(T_krogov))
            circle_confirmation = 20
            thresh = 0.4
            """
            if(len(T_krogov) >= 3){
            l1 = 0
            l2 = 0
            l3 = 0
            }
            """
            if (len(T_krogov) == 0):
                tmp = P_krogi()
                tmp.add(tocka)
                T_krogov.append(tmp)
    
            else:
                #print(T_krogov[0])
                dodan = False
                novKrog = True
            
                for krog in T_krogov:
                    #print(krog.tocke[0].x)
                    #print("razdalja ",euclidian(tocka, krog.centroid))
                    if(euclidian(tocka, krog.centroid) < thresh):
    
                        novKrog = False
    
                        if(len(krog.tocke) < circle_confirmation+1 and not dodan):
                            krog.add(tocka)
                            dodan = True
    
                        if(len(krog.tocke) == circle_confirmation and self.double_check(krog,circle_confirmation,thresh)):
                            krog.markirana = True
                            #print("dodan marker")
                            # Create a Pose object with the same position
                            center = krog.centroid

                            pose = Pose()
                            pose_robot = self.get_robot_pose()


                            pose.position.x = center.x
                            pose.position.y = center.y
                            pose.position.z = center.z


                            self.markers_cilji_pub.publish(self.get_goal(pose_robot, pose))
                            # Create a marker used for visualization of circle detection
                            self.marker_num += 1
                            marker = Marker()
                            marker.header.stamp = point_world.header.stamp
                            marker.header.frame_id = point_world.header.frame_id
                            marker.pose = pose
                            marker.type = Marker.CUBE
                            marker.action = Marker.ADD
                            marker.frame_locked = False
                            marker.lifetime = rospy.Duration.from_sec(120)
                            marker.id = self.marker_num
                            marker.scale = Vector3(0.1, 0.1, 0.1)
                            marker.color = ColorRGBA(1, 0, 0, 1)
                            self.marker_array.markers.append(marker)
                            self.markers_pub.publish(self.marker_array)
                            
                            # Create a marker used for visu
        #point_s.header.frame_id = "base_link"
        #point_s.header.stamp = alization of pozdravljanje goals
                            
                            self.marker_num += 1
                            marker = Marker()
                            marker.header.stamp = point_world.header.stamp
                            marker.header.frame_id = '/map'
                            marker.pose = self.get_goal(pose_robot, pose)
                            marker.type = Marker.CUBE
                            marker.action = Marker.ADD
                            marker.frame_locked = False
                            marker.lifetime = rospy.Duration.from_sec(120)
                            marker.id = self.marker_num
                            marker.scale = Vector3(0.1, 0.1, 0.1)
                            marker.color = ColorRGBA(0, 1, 0, 1)
                            self.marker_array.markers.append(marker)
                            #for k in T_krogov:
                            #    print("razdalja od tocke do centroida:", euclidian(tocka, k.centroid), ", stevilo zaznav v skupini:",len(k.tocke), "dodana:", k.markirana)
                            self.markers_pub.publish(self.marker_array)



        #point_s.header.frame_id = "base_link"
        #point_s.header.stamp = 
                            
    
                if (novKrog):
                    tmp = P_krogi()
                    tmp.add(tocka)
                    T_krogov.append(tmp)

    def ratio(self,e1,e2):

        (x1,y1), (Ma1, ma1), angle1 = e1 
        (x2,y2), (Ma2, ma2), angle2 = e2 

        a1 = ma1/2
        a2 = ma2/2
        r1 = 0

        b1 = Ma1/2
        b2 = Ma2/2
        r2 = 0

        r3 = a1/b1

        if b1 == 0 or b2 == 0 or a1 == 0 or a2 == 0:
            return False
        size = (e1[1][0]+e1[1][1])/2
        center = (e1[0][1], e1[0][0])
       
        r2 = 0

        if b1 < b2:
            
            r2 = b2/b1
        else:
            r2 = b1/b2
        
        if a1 < a2:
            r1 = a2/a1
        else:
            r1 = a1/a2
        #print("ratio:", r3)
        if r1 > 1.2 and r1 < 1.5:
            if r2 > 1.2 and r2 < 1.5:
                if 0.9 < r3 < 1.2:
                    return True
        return False

 
    def image_callback(self,data):
        self.time_rec = data.header.stamp
        #print('Iam here!')
        if(self.counter >= 10):
            #rospy.loginfo(self.counter)
            try:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
               
            except CvBridgeError as e:
                print(e)

            # Set the dimensions of the image
            self.dims = cv_image.shape
            #print("self.dims[0]",self.dims[0])
            #print("self.dims[1]",self.dims[1])
            #print("self.dims[2]",self.dims[2])
            #cv_image = cv_image[60:-60, 80:-80]
            cv_image = cv_image[60:360,80:380]
            #print("tralala")
            
            #print(self.dims)
            #gledamo y = 50 do 320
 
            # Tranform image to gayscale
            gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
 
            # Do histogram equlization
            img = cv2.equalizeHist(gray)
 
            # Binarize the image
            #ret, thresh = cv2.threshold(img, 60, 255, 0)
            thresh = cv2.Canny(img,100,200)
            #cv2.imshow("Binary window", thresh)
            #cv2.imshow("Slika",cv_image)
            #cv2.waitKey(1)

 
            # Extract contours
            contours_, contours, hierarchy = cv2.findContours(thresh, 2, 2)
 
            # Example how to draw the contours
            #cv2.drawContours(cv_image, contours, -1, (0, 0, 255), 3)
 
            # Fit elipses to all extracted contours
            elps = []
            for cnt in contours:
                #     print cnt
                #     print cnt.shape
                #print(cnt)
                if cnt.shape[0] >= 60:
                    ellipse = cv2.fitEllipse(cnt)

                    elps.append(ellipse)
                    #cv2.drawContours(cv_image, cnt, -1, (255, 0, 0), 3)
                    #cv2.ellipse(cv_image, ellipse, (255, 0, 0), 2)
 
 
            # Find two elipses with same centers
            candidates = []
            for n in range(len(elps)):
                for m in range(n + 1, len(elps)):
                    e1 = elps[n]
                    e2 = elps[m]


 
                    dist = np.sqrt(((e1[0][0] - e2[0][0]) ** 2 + (e1[0][1] - e2[0][1]) ** 2))
                    #             print dist
                    if dist < 5 and self.ratio(e1,e2):
                        candidates.append((e1,e2))
 
            try:
                depth_img = rospy.wait_for_message('/camera/depth_registered/image_raw', Image)
            except Exception as e:
                print(e)
 
            #depth_img = depth_img[60:330, 0:self.dims[1]]

            # Extract the depth from the depth image
            for c in candidates:
 
                e1 = c[0]
                e2 = c[1]


                #cv2.ellipse(cv_image, e1, (0, 255, 0), 2)
                #cv2.ellipse(cv_image, e2, (0, 255, 0), 2)
 
                size = (e1[1][0]+e1[1][1])/2
                center = (e1[0][1], e1[0][0])
 
                x1 = int(center[0] - size / 2)
                x2 = int(center[0] + size / 2)
                x_min = x1 if x1>0 else 0
                x_max = x2 if x2<cv_image.shape[0] else cv_image.shape[0]
 
                y1 = int(center[1] - size / 2)
                y2 = int(center[1] + size / 2)
                y_min = y1 if y1 > 0 else 0
                y_max = y2 if y2 < cv_image.shape[1] else cv_image.shape[1]
 
                depth_image = self.bridge.imgmsg_to_cv2(depth_img, "16UC1")
 
                #depth_image = depth_image[60:-60, 80:-80]
                depth_image = depth_image[60:360, 80:380]
 
                self.get_pose(e1, float(np.mean(depth_image[x_min:x_max,y_min:y_max]))/1000.0)
 
            self.counter = 0
        else:
            self.counter = self.counter + 1
 
    def depth_callback(self,data):
 
        try:
            depth_image = self.bridge.imgmsg_to_cv2(data, "16UC1")
        except CvBridgeError as e:
            print(e)
 
        # Do the necessairy conversion so we can visuzalize it in OpenCV
        image_1 = depth_image / 65536.0 * 255
        image_1 =image_1/np.max(image_1)*255
 
 
        image_viz = np.array(image_1, dtype= np.uint8)
 
        #cv2.imshow("Depth window", image_viz)
        #cv2.waitKey(1)
 
 
def main(args):
 
    ring_finder = The_Ring()
    
    
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

    
 
    cv2.destroyAllWindows()
 
 
if __name__ == '__main__':
    main(sys.argv)