#!/usr/bin/env python
from __future__ import print_function

import roslib
# roslib.load_manifest('exercise4')
import sys
import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from std_msgs.msg import ColorRGBA

import pyzbar.pyzbar as pyzbar

dictm = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_6X6_250)

# The object that we will pass to the markerDetect function
params =  cv2.aruco.DetectorParameters_create()

print(params.adaptiveThreshConstant) 
print(params.adaptiveThreshWinSizeMax)
print(params.adaptiveThreshWinSizeMin)
print(params.minCornerDistanceRate)
print(params.adaptiveThreshWinSizeStep)

# To see description of the parameters
# https://docs.opencv.org/3.3.1/d1/dcd/structcv_1_1aruco_1_1DetectorParameters.html

# You can set these parameters to get better marker detections
params.adaptiveThreshConstant = 25
adaptiveThreshWinSizeStep = 2


class The_Rectifier:
    def __init__(self):
        rospy.init_node('image_converter', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # Subscribe to the image and/or depth topic
        self.image_sub = rospy.Subscriber("/camera/rgb/image_color", Image, self.image_callback)

    def image_callback(self,data):
        # print('Iam here!')

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)

        # Set the dimensions of the image
        self.dims = cv_image.shape

        # Tranform image to gayscale
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        

        # Option 1 - use adaptive thresholding
        img_out = cv2.adaptiveThreshold(gray,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,5)

        # Extract contours
        _, contours, hierarchy = cv2.findContours(img_out, 2, 2)

        # Example how to draw the contours
        # cv2.drawContours(img, contours, -1, (255, 0, 0), 3)

        # Fit elipses to all extracted contours
        elps = []
        for cnt in contours:
            #     print cnt
            #     print cnt.shape
            if cnt.shape[0] >= 40:
                ellipse = cv2.fitEllipse(cnt)
                elps.append(ellipse)


        # Find two elipses with same centers
        candidates = []
        for n in range(len(elps)):
            for m in range(n + 1, len(elps)):
                e1 = elps[n]
                e2 = elps[m]
                dist = np.sqrt(((e1[0][0] - e2[0][0]) ** 2 + (e1[0][1] - e2[0][1]) ** 2))
                #             print dist
                if dist < 3:
                    candidates.append((e1,e2))
                    
                    
        ###########################################
        #### This is relevant for exercise 8
        ###########################################
        
        if len(candidates)>=1:
            print('Ring detected! (hopefully)')
                    
            # Find a QR code in the image
            decodedObjects = pyzbar.decode(cv_image)
            
            #print(decodedObjects)
            
            if len(decodedObjects) == 1:
                dObject = decodedObjects[0]
                print("Found 1 QR code in the image!")
                print("Data: ", dObject.data,'\n')
                
                # Visualize the detected QR code in the image
                points  = dObject.polygon
                if len(points) > 4 : 
                    hull = cv2.convexHull(np.array([point for point in points], dtype=np.float32))
                    hull = list(map(tuple, np.squeeze(hull)))
                else : 
                    hull = points;
                 
                ## Number of points in the convex hull
                n = len(hull)
             
                ## Draw the convext hull
                for j in range(0,n):
                    cv2.line(cv_image, hull[j], hull[ (j+1) % n], (0,255,0), 2)
                    
                cv2.imshow('Warped image',cv_image)
                cv2.waitKey(1)
                    
            elif len(decodedObjects)==0:
                print("No QR code in the image")
            else:
                print("Found more than 1 QR code")
            
        elif len(candidates)==0:
            print('No contours detected')
        else:
            print('Some contours detected, not sure if it is a ring',len(candidates))
            for elps in candidates:
                e1 = elps[0]
                e2 = elps[0]
                cv2.ellipse(cv_image,e1,(0,255,0),3)
                cv2.ellipse(cv_image,e2,(0,255,0),3)
                #cv2.imshow('The found rings', cv_image)
                #cv2.waitKey(1)


def main(args):

    ring_rectifier = The_Rectifier()

    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main(sys.argv)
