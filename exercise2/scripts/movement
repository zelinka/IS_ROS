#!/usr/bin/env python
# -*- Mode: Python; indent-tabs-mode: nil; c-basic-offset: 2; tab-width: 2 -*- *

import roslib; roslib.load_manifest('exercise2')
import rospy
from geometry_msgs.msg import Twist
from exercise2.msg import Sporocilo

def callback(sporocilo):
    if(sporocilo.ukaz == "krog"):
      twist = krozi()
    elif(sporocilo.ukaz == "gordol"):
      twist = gordol()
    return twist

def listener():
    rospy.init_node('custom_listener', anonymous=True)
    rospy.Subscriber("move_type", Sporocilo, callback)
    rospy.spin()

def krozi():
    twist = Twist()
    twist.linear.x = 0.4
    #TODO
    return twist

def gordol():
    twist = Twist()
    twist.linear.x = 0.4
    #TODO
    return twist

def rectangle_movement(step):

  twist = Twist()
  twist.linear.x = 0.4
  step = step % 20

  if step % 5 == 0:
    twist.linear.x = 0
    twist.angular.z = 1.57 #(90 / 360) * 2 * 3.14

  return twist

def movement():

  pub = rospy.Publisher('cmd_vel', Twist, queue_size = 1000)
  pub2 = rospy.Publisher('move_type', Sporocilo, queue_size = 1000)
  # For the turtle simulation map the topic to /turtle1/cmd_vel
  # For the turtlebot simulation and Turtlebot map the topic to /cmd_vel_mux/input/navi
  rospy.init_node('movement')

  r = rospy.Rate(1)
  pub2.publish("gordol")
  while not rospy.is_shutdown():
    listener()
    pub.publish(twist)
    r.sleep()

if __name__ == '__main__':
    movement()
