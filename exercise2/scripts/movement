#!/usr/bin/env python
# -*- Mode: Python; indent-tabs-mode: nil; c-basic-offset: 2; tab-width: 2 -*- *

import roslib; roslib.load_manifest('exercise2')
import rospy
import sys
from geometry_msgs.msg import Twist
from exercise2.msg import Sporocilo

#rostopic pub move_type exercise2/Sporocil'{ukaz: "sestkotnik"}'
trenutni_ukaz = 'gordol'

def callback(sporocilo):
  global trenutni_ukaz  
  trenutni_ukaz = sporocilo.ukaz
  rospy.loginfo("SPREMEMBA: %s", trenutni_ukaz)

def listener():
    rospy.Subscriber("move_type", Sporocilo, callback)
    #rospy.spin()

def sestkotnik(step):
  twist = Twist()
  twist.linear.x = 0.4
  step = step % 20

  if step % 3 == 0:
    twist.linear.x = 0
    twist.angular.z = 1.04 #(90 / 360) * 2 * 3.14

  return twist

def gordol(step):
  twist = Twist()
  twist.linear.x = 0.4
  step = step % 20

  if step % 4 == 0:
    twist.linear.x = 0
    twist.angular.z = 3.14 #(90 / 360) * 2 * 3.14

  return twist

def kvadrat(step):

  twist = Twist()
  twist.linear.x = 0.4
  step = step % 20

  if step % 5 == 0:
    twist.linear.x = 0
    twist.angular.z = 1.57 #(90 / 360) * 2 * 3.14

  return twist

def movement():

  pub = rospy.Publisher('cmd_vel', Twist, queue_size = 1000)
  pub2 = rospy.Publisher('move_type', Sporocilo, queue_size = 1000)
  # For the turtle simulation map the topic to /turtle1/cmd_vel
  # For the turtlebot simulation and Turtlebot map the topic to /cmd_vel_mux/input/navi
  rospy.init_node('movement')


  r = rospy.Rate(1)
  pub2.publish("gordol")
  step = 0.0

  listener()
  
  while not rospy.is_shutdown():

    if trenutni_ukaz == "sestkotnik":
      twist = sestkotnik(step)
    elif trenutni_ukaz == "kvadrat":
      twist = kvadrat(step)
    else:
      twist = gordol(step)
    rospy.loginfo(trenutni_ukaz)
    pub.publish(twist)
    step = step + 1.0
    r.sleep()

if __name__ == '__main__':
    movement()
